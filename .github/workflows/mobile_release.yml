name: Mobile Release (Android + iOS)

on:
  workflow_dispatch:
    inputs:
      build_params:
        description: 'Build parameters (JSON)'
        required: false
        type: string
        default: '{"build_number": "", "release_notes": "", "preflight": "false"}'
      android_params:
        description: 'Android-specific parameters (JSON)'
        required: false
        type: string
        default: '{"app_id": "app.mhb.preview", "package_name": "app.mhb.preview", "track": "internal", "upload": "false", "crashlytics_upload": "false"}'
      ios_params:
        description: 'iOS-specific parameters (JSON)'
        required: false
        type: string
        default: '{"bundle_id": "app.mhb.preview", "scheme": "Runner", "export_method": "app-store", "upload": "false"}'
      sentry_params:
        description: 'Sentry integration parameters (JSON)'
        required: false
        type: string
        default: '{"upload": "false", "org": "", "project_android": "", "project_ios": "", "release": "", "environment": "beta"}'
      release_params:
        description: 'GitHub Release and notification parameters (JSON)'
        required: false
        type: string
        default: '{"create_gh_release": "false", "tag_prefix": "mobile-v", "notify_slack": "false"}'

jobs:
  Parse-Inputs:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.parse.outputs.build }}
      android: ${{ steps.parse.outputs.android }}
      ios: ${{ steps.parse.outputs.ios }}
      sentry: ${{ steps.parse.outputs.sentry }}
      release: ${{ steps.parse.outputs.release }}
    steps:
      - name: Parse JSON inputs
        id: parse
        run: |
          echo "build=$(echo '${{ inputs.build_params }}' | jq -c .)" >> $GITHUB_OUTPUT
          echo "android=$(echo '${{ inputs.android_params }}' | jq -c .)" >> $GITHUB_OUTPUT
          echo "ios=$(echo '${{ inputs.ios_params }}' | jq -c .)" >> $GITHUB_OUTPUT
          echo "sentry=$(echo '${{ inputs.sentry_params }}' | jq -c .)" >> $GITHUB_OUTPUT
          echo "release=$(echo '${{ inputs.release_params }}' | jq -c .)" >> $GITHUB_OUTPUT

  android:
    name: Android job
    needs: Parse-Inputs
    uses: ./.github/workflows/android_release.yml
    secrets: inherit
    with:
      app_id: ${{ fromJson(needs.Parse-Inputs.outputs.android).app_id }}
      package_name: ${{ fromJson(needs.Parse-Inputs.outputs.android).package_name }}
      track: ${{ fromJson(needs.Parse-Inputs.outputs.android).track }}
      build_number: ${{ fromJson(needs.Parse-Inputs.outputs.build).build_number }}
      release_notes: ${{ fromJson(needs.Parse-Inputs.outputs.build).release_notes }}
      upload: ${{ fromJson(needs.Parse-Inputs.outputs.android).upload }}
      preflight: ${{ fromJson(needs.Parse-Inputs.outputs.build).preflight }}
      environment: ${{ fromJson(needs.Parse-Inputs.outputs.sentry).environment }}
      sentry_upload: ${{ fromJson(needs.Parse-Inputs.outputs.sentry).upload }}
      sentry_org: ${{ fromJson(needs.Parse-Inputs.outputs.sentry).org }}
      sentry_project: ${{ fromJson(needs.Parse-Inputs.outputs.sentry).project_android }}
      sentry_release: ${{ fromJson(needs.Parse-Inputs.outputs.sentry).release }}
      crashlytics_upload: ${{ fromJson(needs.Parse-Inputs.outputs.android).crashlytics_upload }}

  ios:
    name: iOS job
    needs: Parse-Inputs
    uses: ./.github/workflows/ios_release.yml
    secrets: inherit
    with:
      bundle_id: ${{ fromJson(needs.Parse-Inputs.outputs.ios).bundle_id }}
      scheme: ${{ fromJson(needs.Parse-Inputs.outputs.ios).scheme }}
      export_method: ${{ fromJson(needs.Parse-Inputs.outputs.ios).export_method }}
      build_number: ${{ fromJson(needs.Parse-Inputs.outputs.build).build_number }}
      release_notes: ${{ fromJson(needs.Parse-Inputs.outputs.build).release_notes }}
      upload: ${{ fromJson(needs.Parse-Inputs.outputs.ios).upload }}
      preflight: ${{ fromJson(needs.Parse-Inputs.outputs.build).preflight }}
      environment: ${{ fromJson(needs.Parse-Inputs.outputs.sentry).environment }}
      sentry_upload: ${{ fromJson(needs.Parse-Inputs.outputs.sentry).upload }}
      sentry_org: ${{ fromJson(needs.Parse-Inputs.outputs.sentry).org }}
      sentry_project: ${{ fromJson(needs.Parse-Inputs.outputs.sentry).project_ios }}
      sentry_release: ${{ fromJson(needs.Parse-Inputs.outputs.sentry).release }}

  release_notify:
    name: Release and Notify
    runs-on: ubuntu-latest
    needs: [Parse-Inputs, android, ios]
    if: fromJson(needs.Parse-Inputs.outputs.release).create_gh_release == 'true' || fromJson(needs.Parse-Inputs.outputs.release).notify_slack == 'true'
    steps:
      - name: Download Android artifact
        uses: actions/download-artifact@v4
        with:
          name: android-aab
          path: dist
        continue-on-error: true

      - name: Download iOS IPA artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: dist
        continue-on-error: true

      - name: Compose tag and body
        id: meta
        shell: bash
        env:
          TAG_PREFIX: ${{ fromJson(needs.Parse-Inputs.outputs.release).tag_prefix }}
          BN: ${{ fromJson(needs.Parse-Inputs.outputs.build).build_number }}
          RN: ${{ fromJson(needs.Parse-Inputs.outputs.build).release_notes }}
        run: |
          set -e
          BNV="$BN"; [ -z "$BNV" ] && BNV="$GITHUB_RUN_NUMBER"
          TAG="${TAG_PREFIX}${BNV}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "$RN" > RELEASE_BODY.txt
          echo "body_path=$PWD/RELEASE_BODY.txt" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: fromJson(needs.Parse-Inputs.outputs.release).create_gh_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.tag }}
          body_path: ${{ steps.meta.outputs.body_path }}
          files: |
            dist/*.aab
            dist/*.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack notify
        if: fromJson(needs.Parse-Inputs.outputs.release).notify_slack == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -e
          if [ -z "$SLACK_WEBHOOK_URL" ]; then echo "::warning::SLACK_WEBHOOK_URL not set, skipping"; exit 0; fi
          ANDROID_PRESENT=$(ls dist/*.aab 2>/dev/null | wc -l | xargs)
          IOS_PRESENT=$(ls dist/*.ipa 2>/dev/null | wc -l | xargs)
          MSG="Mobile build completed. Android artifact: $ANDROID_PRESENT, iOS artifact: $IOS_PRESENT. Tag: ${{ steps.meta.outputs.tag }}"
          PAYLOAD=$(printf '{"text":"%s"}' "${MSG//"/\"}")
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL"
