version: '3.8'

services:
  # =============================================================================
  # LOAD BALANCER (Nginx)
  # =============================================================================
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    restart: unless-stopped
    networks:
      - app-network

  # =============================================================================
  # BACKEND SERVICES (Scaled Flask API)
  # =============================================================================
  backend-1:
    build: .
    environment:
      - PORT=5055
      - DATABASE_URL=postgresql+psycopg://ai_buddy:ai_buddy_password@db:5432/mental_health
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - RENDER=true
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_KEYS=${GEMINI_API_KEYS:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PPLX_API_KEY=${PPLX_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY:-}
      - AI_PROVIDER=${AI_PROVIDER:-gemini}
      - AI_DEBUG_LOGS=${AI_DEBUG_LOGS:-false}
      - REDIS_URL=redis://redis:6379
      - VERSION=${VERSION:-1.0.0}
      - BUILD_TIME=${BUILD_TIME}
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5055/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  backend-2:
    build: .
    environment:
      - PORT=5055
      - DATABASE_URL=postgresql+psycopg://ai_buddy:ai_buddy_password@db:5432/mental_health
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - RENDER=true
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_KEYS=${GEMINI_API_KEYS:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PPLX_API_KEY=${PPLX_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY:-}
      - AI_PROVIDER=${AI_PROVIDER:-gemini}
      - AI_DEBUG_LOGS=${AI_DEBUG_LOGS:-false}
      - REDIS_URL=redis://redis:6379
      - VERSION=${VERSION:-1.0.0}
      - BUILD_TIME=${BUILD_TIME}
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5055/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  backend-3:
    build: .
    environment:
      - PORT=5055
      - DATABASE_URL=postgresql+psycopg://ai_buddy:ai_buddy_password@db:5432/mental_health
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - RENDER=true
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_KEYS=${GEMINI_API_KEYS:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PPLX_API_KEY=${PPLX_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY:-}
      - AI_PROVIDER=${AI_PROVIDER:-gemini}
      - AI_DEBUG_LOGS=${AI_DEBUG_LOGS:-false}
      - REDIS_URL=redis://redis:6379
      - VERSION=${VERSION:-1.0.0}
      - BUILD_TIME=${BUILD_TIME}
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5055/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  # =============================================================================
  # DATABASE (PostgreSQL)
  # =============================================================================
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=mental_health
      - POSTGRES_USER=ai_buddy
      - POSTGRES_PASSWORD=ai_buddy_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_buddy"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # =============================================================================
  # CACHE (Redis)
  # =============================================================================
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # =============================================================================
  # FRONTEND (Flutter Web)
  # =============================================================================
  flutter-web:
    build:
      context: ./ai_buddy_web
      dockerfile: Dockerfile.web
    ports:
      - "8080:80"
    environment:
      - ENVIRONMENT=production
      - RENDER=true
      - VERSION=${VERSION:-1.0.0}
      - BUILD_TIME=${BUILD_TIME}
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  # =============================================================================
  # MONITORING (Prometheus)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - app-network

  # =============================================================================
  # MONITORING (Grafana)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - app-network

  # =============================================================================
  # LOGGING (ELK Stack - Elasticsearch)
  # =============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - app-network

  # =============================================================================
  # LOGGING (ELK Stack - Logstash)
  # =============================================================================
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./monitoring/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - app-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # =============================================================================
  # LOGGING (ELK Stack - Kibana)
  # =============================================================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./monitoring/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - app-network

  # =============================================================================
  # BACKUP SERVICE
  # =============================================================================
  backup:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    environment:
      - POSTGRES_DB=mental_health
      - POSTGRES_USER=ai_buddy
      - POSTGRES_PASSWORD=ai_buddy_password
    command: >
      sh -c "
        while true; do
          pg_dump -h db -U ai_buddy mental_health > /backup/backup_$$(date +%Y%m%d_%H%M%S).sql;
          find /backup -name 'backup_*.sql' -mtime +7 -delete;
          sleep 86400;
        done
      "
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  nginx_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge 